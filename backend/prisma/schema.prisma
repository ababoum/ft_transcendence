// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                Int                     @id @default(autoincrement())
    // personal info and avatar
    email             String                  @unique
    login             String                  @unique
    nickname          String                  @unique
    password          String
    status            UserStatus              @default(OFFLINE)
    avatar            Image?                  @relation(fields: [imageId], references: [id])
    imageId           Int?
    // authentication
    isTwoFAEnabled    Boolean                 @default(false)
    TwoFA_secret      String?
    // friendships
    userFriends       Friend[]                @relation(name: "user")
    friendUserFriends Friend[]                @relation(name: "friend_user")
    blockerId         Int?
    blocker           User?                   @relation("blocking", fields: [blockerId], references: [id])
    blockedList       User[]                  @relation("blocking")
    // chats
    chatRoomOwned     ChatRoom[]              @relation(name: "OwnerTable")
    chatRoomAdmined   ChatRoom[]              @relation(name: "AdminTable")
    chatRoomJoined    ChatRoom[]              @relation(name: "ParticipantTable")
    chatRoomBanned    ChatRoom[]              @relation(name: "BanTable")
    chatRoomMuted     UsersMutedinChatRooms[]
    messages          Messages[]
    // games
    matchWinner       Match[]                 @relation(name: "match_winner")
    matchLoser        Match[]                 @relation(name: "match_loser")
    rating            Int                     @default(0)
}

// bi-directional
model Friend {
    id           Int  @id @default(autoincrement())
    userId       Int
    friendUserId Int
    User         User @relation(name: "user", fields: [userId], references: [id])
    FriendUser   User @relation(name: "friend_user", fields: [friendUserId], references: [id])

    @@unique([userId, friendUserId])
}

model ChatRoom {
    id           Int                     @id @default(autoincrement())
    name         String
    creationDate DateTime                @default(now())
    mode         chatRoomType            @default(PUBLIC)
    password     String?
    owner        User                    @relation(fields: [ownerlogin], references: [login], name: "OwnerTable")
    ownerlogin   String
    admin        User[]                  @relation(name: "AdminTable")
    participants User[]                  @relation(name: "ParticipantTable")
    banList      User[]                  @relation(name: "BanTable")
    muteList     UsersMutedinChatRooms[]
    messages     Messages[]
}

model UsersMutedinChatRooms {
    chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
    chatRoomId Int
    user       User     @relation(fields: [userLogin], references: [login])
    userLogin  String
    mutedAt    DateTime @default(now())
    mutedUntil DateTime

    @@id([chatRoomId, userLogin])
}

model Messages {
    id           Int      @id @default(autoincrement())
    creationDate DateTime @default(now())
    author       User     @relation(fields: [authorLogin], references: [login])
    authorLogin  String
    content      String
    location     ChatRoom @relation(fields: [chatRoomId], references: [id])
    chatRoomId   Int
}

model Image {
    id       Int    @id @default(autoincrement())
    filename String @unique
    filepath String
    mimetype String
    size     BigInt
    User     User[]
}

model Match {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    winnerLogin String
    loserLogin  String
    winner      User     @relation(name: "match_winner", fields: [winnerLogin], references: [login])
    loser       User     @relation(name: "match_loser", fields: [loserLogin], references: [login])
    winnerScore Int
    loserScore  Int
}

enum chatRoomType {
    PRIVATE
    PROTECTED
    PUBLIC
}

enum UserStatus {
    ONLINE
    OFFLINE
    IN_GAME
}
