// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                Int        @id @default(autoincrement())
    email             String     @unique
    login             String     @unique
    nickname          String
    password          String
    status            UserStatus @default(OFFLINE)
    avatar            Image?     @relation(fields: [imageId], references: [id])
    imageId           Int?
    userFriends       Friend[]   @relation(name: "user")
    friendUserFriends Friend[]   @relation(name: "friend_user")
    blockerId         Int?
    blocker           User?      @relation("blocking", fields: [blockerId], references: [id])
    blockedList       User[]     @relation("blocking")
    chatRoomOwned     ChatRoom[] @relation(name: "OwnerTable")
    chatRoomAdmined   ChatRoom[] @relation(name: "AdminTable")
    chatRoomJoined    ChatRoom[] @relation(name: "ParticipantTable")
    chatRoomBanned    ChatRoom[] @relation(name: "BanTable")
    chatRoomMuted     ChatRoom[] @relation(name: "MuteTable")
    messages          Messages[]
}

// bi-directional
model Friend {
    id           Int  @id @default(autoincrement())
    userId       Int
    friendUserId Int
    User         User @relation(name: "user", fields: [userId], references: [id])
    FriendUser   User @relation(name: "friend_user", fields: [friendUserId], references: [id])

    @@unique([userId, friendUserId])
}

// uni-directional
// model Blocked {
//     id            Int  @id @default(autoincrement())
//     blockedUserId Int  @unique
//     blocker       User @relation(fields: [blockerId], references: [id])
//     blockerId     Int
// }

model ChatRoom {
    id					Int				@id @default(autoincrement())
    name				String
	creationDate		DateTime		@default(now())
	mode				chatRoomType	@default(PUBLIC)
	password			String?
	owner				User			@relation(fields: [ownerlogin], references: [login], name:"OwnerTable")
	ownerlogin			String
	admin				User[]			@relation(name:"AdminTable")
	participants		User[]			@relation(name:"ParticipantTable")
	banList				User[]			@relation(name:"BanTable")
	muteList			User[]			@relation(name:"MuteTable")
	messages			Messages[]
}

model Messages {
    id           Int      @id @default(autoincrement())
    creationDate DateTime @default(now())
    author       User     @relation(fields: [authorId], references: [id])
    authorId     Int
    content      String
    location     ChatRoom @relation(fields: [chatRoomId], references: [id])
    chatRoomId   Int
}

enum chatRoomType {
    PRIVATE
    PROTECTED
    PUBLIC
}

enum UserStatus {
    ONLINE
    OFFLINE
    IN_GAME
}

model Image {
    id       Int    @id @default(autoincrement())
    filename String	@unique
    filepath String
    mimetype String
    size     BigInt
    User     User[]
}
